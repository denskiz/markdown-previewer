{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","markdown","event","this","setState","target","value","react_default","a","createElement","className","id","onChange","handleChange","bind","rows","cols","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGqBA,oNACjBC,MAAQ,CACNC,SAAU,0iBAIDC,GACXC,KAAKC,SAAS,CAAEH,SAAUC,EAAMG,OAAOC,yCAGvC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,wCAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASD,UAAU,eAAcE,SAAUT,KAAKU,aAAaC,KAAKX,MAAOG,MAAOH,KAAKH,MAAMC,SAAUc,KAAM,GAAIC,KAAM,MAEpIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,qBACEF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WAAYR,KAAKH,MAAMC,WAEnCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAjC,wBA/BmBO,cCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.573ba8e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport default class App extends Component {\n    state = {\n      markdown: \"Heading\\n=======\\r\\n\\r\\nSub-heading\\r\\n-----------\\r\\n\\r\\n### Another deeper heading\\r\\n\\r\\nParagraphs are separated\\r\\nby a blank line.\\r\\n\\r\\nLeave 2 spaces at the end of a line to do a\\r\\nline break\\r\\n\\r\\nText attributes *italic*, **bold**,\\r\\n`monospace`, ~~strikethrough~~ .\\r\\n\\r\\nShopping list:\\r\\n\\r\\n  * apples\\r\\n  * oranges\\r\\n  * pears\\r\\n\\r\\nNumbered list:\\r\\n\\r\\n  1. apples\\r\\n  2. oranges\\r\\n  3. pears\\r\\n\\r\\nThe rain---not the reign---in\\r\\nSpain.\\r\\n\\r\\n\"\n    };\n  \n\n  handleChange(event) {\n    this.setState({ markdown: event.target.value});\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h1 className=\"text-center\">Github Flavored Markdown Previewer</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-md-6\">\n            <h2>Markdown</h2>\n            <textarea id=\"editor\" className=\"form-control\"onChange={this.handleChange.bind(this)} value={this.state.markdown} rows={10} cols={30}/>\n          </div>\n          <div className=\"col-lg-6 col-md-6\">\n            <h2>Preview</h2>\n              <div id=\"preview\">{(this.state.markdown)}</div>\n          </div>\n          <div className=\"col-md-12\">\n            <footer>\n              <br/>\n              <br/>\n              <div>a freeCodeCamp <i className=\"fa fa-free-code-camp\"></i> Project</div>\t\n            </footer>\n          </div>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}